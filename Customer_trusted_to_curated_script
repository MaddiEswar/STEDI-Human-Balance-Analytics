import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsgluedq.transforms import EvaluateDataQuality
from awsglue import DynamicFrame

def sparkSqlQuery(glueContext, query, mapping, transformation_ctx) -> DynamicFrame:
    for alias, frame in mapping.items():
        frame.toDF().createOrReplaceTempView(alias)
    result = spark.sql(query)
    return DynamicFrame.fromDF(result, glueContext, transformation_ctx)
args = getResolvedOptions(sys.argv, ['JOB_NAME'])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# Default ruleset used by all target nodes with data quality enabled
DEFAULT_DATA_QUALITY_RULESET = """
    Rules = [
        ColumnCount > 0
    ]
"""

# Script generated for node customer trusted
customertrusted_node1758781809397 = glueContext.create_dynamic_frame.from_options(format_options={"multiLine": "false"}, connection_type="s3", format="json", connection_options={"paths": ["s3://udacity-work/customer/trusted/"], "recurse": True}, transformation_ctx="customertrusted_node1758781809397")

# Script generated for node Accelerometer trusted
Accelerometertrusted_node1758781704740 = glueContext.create_dynamic_frame.from_options(format_options={"multiLine": "false"}, connection_type="s3", format="json", connection_options={"paths": ["s3://udacity-work/accelerometer/trusted/"], "recurse": True}, transformation_ctx="Accelerometertrusted_node1758781704740")

# Script generated for node Drop fields and duplicates
SqlQuery0 = '''
select distinct cus.* from cus inner join acc on acc.user=cus.email;
'''
Dropfieldsandduplicates_node1758792572366 = sparkSqlQuery(glueContext, query = SqlQuery0, mapping = {"acc":Accelerometertrusted_node1758781704740, "cus":customertrusted_node1758781809397}, transformation_ctx = "Dropfieldsandduplicates_node1758792572366")

# Script generated for node customer curated
EvaluateDataQuality().process_rows(frame=Dropfieldsandduplicates_node1758792572366, ruleset=DEFAULT_DATA_QUALITY_RULESET, publishing_options={"dataQualityEvaluationContext": "EvaluateDataQuality_node1758781695321", "enableDataQualityResultsPublishing": True}, additional_options={"dataQualityResultsPublishing.strategy": "BEST_EFFORT", "observations.scope": "ALL"})
customercurated_node1758782266977 = glueContext.getSink(path="s3://udacity-work/customer/curated/", connection_type="s3", updateBehavior="UPDATE_IN_DATABASE", partitionKeys=[], enableUpdateCatalog=True, transformation_ctx="customercurated_node1758782266977")
customercurated_node1758782266977.setCatalogInfo(catalogDatabase="stedi",catalogTableName="customer_curated")
customercurated_node1758782266977.setFormat("json")
customercurated_node1758782266977.writeFrame(Dropfieldsandduplicates_node1758792572366)
job.commit()
